Starting on 11-16 at 18:16:08


Question q1

===========


Pacman emerges victorious! Score: 1242

Pacman emerges victorious! Score: 1263

Pacman emerges victorious! Score: 1250

Pacman emerges victorious! Score: 1258

Pacman died! Score: 73

Pacman emerges victorious! Score: 1256

Pacman emerges victorious! Score: 1252

Pacman emerges victorious! Score: 1258

Pacman emerges victorious! Score: 1256

Pacman emerges victorious! Score: 1260

Average Score: 1136.8
Scores:        1242.0, 1263.0, 1250.0, 1258.0, 73.0, 1256.0, 1252.0, 1258.0, 1256.0, 1260.0
Win Rate:      9/10 (0.90)
Record:        Win, Win, Win, Win, Loss, Win, Win, Win, Win, Win

*** FAIL: auto_test_cases\q1\grade-agent.test (3 of 4 points)

***     1136.8 average score (2 of 2 points)

***         Grading scheme:

***          < 500:  0 points

***         >= 500:  1 points

***         >= 1000:  2 points

***     10 games not timed out (0 of 0 points)

***         Grading scheme:

***          < 10:  fail

***         >= 10:  0 points

***     9 wins (1 of 2 points)

***         Grading scheme:

***          < 1:  fail

***         >= 1:  0 points

***         >= 5:  1 points

***         >= 10:  2 points


### Question q1: 3/4 ###


Question q2

===========


*** PASS: auto_test_cases\q2\0-lecture-6-tree.test

*** PASS: auto_test_cases\q2\0-small-tree.test

*** PASS: auto_test_cases\q2\1-1-minmax.test*** PASS: auto_test_cases\q2\1-2-minmax.test

*** PASS: auto_test_cases\q2\1-3-minmax.test

*** PASS: auto_test_cases\q2\1-4-minmax.test

*** PASS: auto_test_cases\q2\1-5-minmax.test

*** PASS: auto_test_cases\q2\1-6-minmax.test

*** PASS: auto_test_cases\q2\1-7-minmax.test

*** PASS: auto_test_cases\q2\1-8-minmax.test

*** PASS: auto_test_cases\q2\2-1a-vary-depth.test

*** PASS: auto_test_cases\q2\2-1b-vary-depth.test

*** PASS: auto_test_cases\q2\2-2a-vary-depth.test

*** PASS: auto_test_cases\q2\2-2b-vary-depth.test

*** PASS: auto_test_cases\q2\2-3a-vary-depth.test

*** PASS: auto_test_cases\q2\2-3b-vary-depth.test

*** PASS: auto_test_cases\q2\2-4a-vary-depth.test

*** PASS: auto_test_cases\q2\2-4b-vary-depth.test

*** PASS: auto_test_cases\q2\2-one-ghost-3level.test

*** PASS: auto_test_cases\q2\3-one-ghost-4level.test

*** PASS: auto_test_cases\q2\4-two-ghosts-3level.test

*** PASS: auto_test_cases\q2\5-two-ghosts-4level.test

*** PASS: auto_test_cases\q2\6-tied-root.test

*** PASS: auto_test_cases\q2\7-1a-check-depth-one-ghost.test

*** PASS: auto_test_cases\q2\7-1b-check-depth-one-ghost.test

*** FAIL: auto_test_cases\q2\7-1c-check-depth-one-ghost.test

***     Incorrect move for depth=3

***         Student move: Center

***         Optimal move: Right

***     Incorrect generated nodes for depth=3

***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3

***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3

***     Tree:

***                 a

***           /-/   |   \--\

***          /      |       \

***       0 b1    0 b2      b3 8

***         |       |        |

***      10 c1    0 c2      c3 8

***         |       |        |

***       0 d1    0 d2      d3 8

***         |       |        |

***       0 e1   10 e2      e3 8

***         |       |        |

***       0 f1    0 f2      f3 8

***         |       |        |

***         g1      g2      g3

***         0       0        8

***     

***     a - max

***     b - min

***     c - max

***     d - min

***     e - max

***     f - min

***     

***     At depth 3, the evaluation function is called at level g,

***     so Right should be returned. If your algorithm is returning a

***     different action, check how you implemented your depth.

*** PASS: auto_test_cases\q2\7-2a-check-depth-two-ghosts.test

*** FAIL: auto_test_cases\q2\7-2b-check-depth-two-ghosts.test

***     Incorrect move for depth=2

***         Student move: Left

***         Optimal move: Center

***     Incorrect generated nodes for depth=2

***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3

***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3

***     Tree:

***                 a

***           /-/   |   \--\

***          /      |       \

***       0 b1    0 b2      b3 8

***         |       |        |

***       0 c1    0 c2      c3 8

***         |       |        |

***      10 d1    0 d2      d3 8

***         |       |        |

***       0 e1    0 e2      e3 8

***         |       |        |

***       0 f1    0 f2      f3 8

***         |       |        |

***       0 g1   10 g2      g3 8

***         |       |        |

***       0 h1    0 h2      h3 8

***         |       |        |

***       0 i1    0 i2      i3 8

***         |       |        |

***         j1      j2      j3

***         0       0        8

***     

***     a - max

***     b - min

***     c - min

***     d - max

***     e - min

***     f - min

***     g - max

***     h - min

***     i - min

***     

***     At depth 2, the evaluation function is called at level g,

***     so Center should be returned. If your algorithm is returning

***     a different action, check how you implemented your depth.

*** FAIL: auto_test_cases\q2\7-2c-check-depth-two-ghosts.test

***     Incorrect move for depth=3

***         Student move: Center

***         Optimal move: Right

***     Incorrect generated nodes for depth=3

***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3

***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3 h1 h2 h3 i1 i2 i3 j1 j2 j3

***     Tree:

***                 a

***           /-/   |   \--\

***          /      |       \

***       0 b1    0 b2      b3 8

***         |       |        |

***       0 c1    0 c2      c3 8

***         |       |        |

***      10 d1    0 d2      d3 8

***         |       |        |

***       0 e1    0 e2      e3 8

***         |       |        |

***       0 f1    0 f2      f3 8

***         |       |        |

***       0 g1   10 g2      g3 8

***         |       |        |

***       0 h1    0 h2      h3 8

***         |       |        |

***       0 i1    0 i2      i3 8

***         |       |        |

***         j1      j2      j3

***         0       0        8

***     

***     a - max

***     b - min

***     c - min

***     d - max

***     e - min

***     f - min

***     g - max

***     h - min

***     i - min

***     

***     At depth 3, the evaluation function is called at level j,

***     so Right should be returned. If your algorithm is returning

***     a different action, check how you implemented your depth.

*** FAIL: Exception raised: 'map' object is not subscriptable

*** 

*** Traceback (most recent call last):

***   File "C:\Users\rikla\Documents\Dev\aWorking\grading.py", line 75, in grade

***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function

***   File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__

***     result = self.function(*args, **keyArgs)

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 312, in <lambda>

***     return lambda grades: question.execute(grades)

***   File "C:\Users\rikla\Documents\Dev\aWorking\testClasses.py", line 57, in execute

***     if not f(grades):

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 307, in <lambda>

***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)

***   File "multiagentTestClasses.py", line 310, in execute

***     pac = GradingAgent(self.seed, studentAgent, allActions, altDepthActions, partialPlyBugActions)

***   File "multiagentTestClasses.py", line 156, in __init__

***     self.actionsConsistentWithOptimal = [True for i in range(len(optimalActions[0]))]

*** TypeError: 'map' object is not subscriptable

*** 


### Question q2: 0/5 ###


Question q3

===========


*** FAIL: Exception raised: module 'multiAgents' has no attribute 'AlphaBetaAgent'

*** 

*** Traceback (most recent call last):

***   File "C:\Users\rikla\Documents\Dev\aWorking\grading.py", line 75, in grade

***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function

***   File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__

***     result = self.function(*args, **keyArgs)

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 312, in <lambda>

***     return lambda grades: question.execute(grades)

***   File "C:\Users\rikla\Documents\Dev\aWorking\testClasses.py", line 57, in execute

***     if not f(grades):

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 307, in <lambda>

***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)

***   File "multiagentTestClasses.py", line 397, in execute

***     action, generated = self.solveProblem(multiAgents)

***   File "multiagentTestClasses.py", line 383, in solveProblem

***     studentAgent = getattr(multiAgents, self.alg)(depth=self.depth)

*** AttributeError: module 'multiAgents' has no attribute 'AlphaBetaAgent'

*** 


### Question q3: 0/5 ###


Question q4

===========


*** PASS: auto_test_cases\q4\0-expectimax1.test

*** PASS: auto_test_cases\q4\1-expectimax2.test

*** PASS: auto_test_cases\q4\2-one-ghost-3level.test

*** PASS: auto_test_cases\q4\3-one-ghost-4level.test

*** PASS: auto_test_cases\q4\4-two-ghosts-3level.test

*** PASS: auto_test_cases\q4\5-two-ghosts-4level.test

*** PASS: auto_test_cases\q4\6-1a-check-depth-one-ghost.test

*** PASS: auto_test_cases\q4\6-1b-check-depth-one-ghost.test

*** PASS: auto_test_cases\q4\6-1c-check-depth-one-ghost.test

*** PASS: auto_test_cases\q4\6-2a-check-depth-two-ghosts.test

*** PASS: auto_test_cases\q4\6-2b-check-depth-two-ghosts.test

*** PASS: auto_test_cases\q4\6-2c-check-depth-two-ghosts.test

*** FAIL: Exception raised: 'map' object is not subscriptable

*** 

*** Traceback (most recent call last):

***   File "C:\Users\rikla\Documents\Dev\aWorking\grading.py", line 75, in grade

***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function

***   File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__

***     result = self.function(*args, **keyArgs)

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 312, in <lambda>

***     return lambda grades: question.execute(grades)

***   File "C:\Users\rikla\Documents\Dev\aWorking\testClasses.py", line 57, in execute

***     if not f(grades):

***   File "C:\Users\rikla\Documents\Dev\aWorking\autograder.py", line 307, in <lambda>

***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)

***   File "multiagentTestClasses.py", line 310, in execute

***     pac = GradingAgent(self.seed, studentAgent, allActions, altDepthActions, partialPlyBugActions)

***   File "multiagentTestClasses.py", line 156, in __init__

***     self.actionsConsistentWithOptimal = [True for i in range(len(optimalActions[0]))]

*** TypeError: 'map' object is not subscriptable

*** 


### Question q4: 0/5 ###


Question q5

===========


Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Traceback (most recent call last):
  File "C:\Users\rikla\Documents\Dev\aWorking\game.py", line 643, in run
    action = timed_func(observation)
  File "C:\Users\rikla\Documents\Dev\aWorking\util.py", line 619, in __call__
    result = self.function(*args, **keyArgs)
  File "multiAgents.py", line 482, in getAction
    temp_cost = self.expected_value(successor, 1, self.depth)  # start with depth 1
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 518, in getMaxActions
    successor_cost.append(self.expected_value(successor, 1, level))
  File "multiAgents.py", line 536, in expected_value
    cost += self.getMaxActions(successor, level-1, agent_index)
  File "multiAgents.py", line 511, in getMaxActions
    return self.evaluationFunction(currGameState)
  File "multiAgents.py", line 47, in betterEvaluationFunction
    scoreBasedOnFood = max(distanceToFood + [0])
TypeError: unsupported operand type(s) for +: 'map' and 'list'
Pacman crashed

Average Score: 0.0
Scores:        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
Win Rate:      0/10 (0.00)
Record:        Loss, Loss, Loss, Loss, Loss, Loss, Loss, Loss, Loss, Loss

*** FAIL: auto_test_cases\q5\grade-agent.test (0 of 6 points)

***     0.0 average score (0 of 2 points)

***         Grading scheme:

***          < 500:  0 points

***         >= 500:  1 points

***         >= 1000:  2 points

***     10 games not timed out (1 of 1 points)

***         Grading scheme:

***          < 0:  fail

***         >= 0:  0 points

***         >= 10:  1 points

***     0 wins (fail: below minimum value 1)

***         Grading scheme:

***          < 1:  fail

***         >= 1:  1 points

***         >= 5:  2 points

***         >= 10:  3 points


### Question q5: 0/6 ###


Finished at 18:16:34


Provisional grades
==================

Question q1: 3/4

Question q2: 0/5

Question q3: 0/5

Question q4: 0/5

Question q5: 0/6

------------------

Total: 3/25


    Your grades are NOT yet registered.  To register your grades, make sure
    to follow your instructor's guidelines to receive credit on your project.
    

The thread 0x1 has exited with code 0 (0x0).
The program 'python.exe' has exited with code 0 (0x0).
